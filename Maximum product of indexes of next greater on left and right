import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scn = new Scanner (System.in);
        int n = scn.nextInt();
        int [] A = new int [n];
        for (int i = 0; i < n; i++){
            A [i] = scn.nextInt();
        }
        int [] LProd = ngel (A);
        int [] RProd = nger (A);
        int [] LRProd = new int [n];
        int ans = -1;
        for (int i = 0; i < n; i++){
            LRProd [i] = (LProd [i] + 1) * (RProd [i] + 1);
            if (ans < LRProd [i]){
                ans = LRProd [i];
            }
        }
        System.out.println (ans);
    }
    public static int [] ngel (int [] A){
        int n = A.length;
        int [] ans = new int [n];
        ans [0] = 0;
        Stack <Integer> S = new Stack <> ();
        S.push(0);
        for (int i = 1; i < n; i++){
            while (S.size() != 0 && A[S.peek()] <= A[i]){
                S.pop();
            }
            if (S.size() == 0){
                ans [i] = 0;
            }
            else{
                ans [i] = S.peek();
            }
            S.push(i);
        }
        return ans;
    }
    public static int [] nger (int [] A){
        int n = A.length;
        int [] ans = new int [n];
        ans [n - 1] = 0;
        Stack <Integer> S = new Stack <> ();
        S.push(n - 1);
        for (int i = n - 2; i >= 0; i--){
            while (S.size() != 0 && A[S.peek()] <= A[i]){
                S.pop();
            }
            if (S.size() == 0){
                ans [i] = 0;
            }
            else{
                ans [i] = S.peek();
            }
            S.push(i);
        }
        return ans;
    }
}
